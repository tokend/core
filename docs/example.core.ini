# At this port TokenD core will listen for commands.
# Connections to this port are unauthenticated, so consider setting
# PUBLIC_HTTP_PORT to false, or protect connection by other means.
#
# Type: Integer
# Possible values: unassigned port (1024 < HTTP_PORT < 65535)
# Default: 11626
HTTP_PORT=8080

# Tells TokenD core to listen to the commands from the source
# other than localhost. If set to false will allow commands from localhost only.
# Set it to true (and allow commands from everywhere) only if you know what
# you are doing.
#
# Type: Boolean
PUBLIC_HTTP_PORT=true

# Prevents node from connecting to other nodes. For testing purposes.
#
# Type: Boolean
# Default: false
RUN_STANDALONE=false

# At this port TokenD core will listen for connections from other TokenD nodes.
#
# Type: Integer
# Possible values: unassigned port (1024 < PEER_PORT < 65535)
# Default: 11625
PEER_PORT=8090

# TokenD network identificator. Sets in which network node will work
# (connect to other nodes, receive transactions, etc.)
#
# Type: String
NETWORK_PASSPHRASE="TokenD Developer Network"

# If set to true tells core to catchup from the beggining,
# replaying all history.
#
# Type: Boolean
CATCHUP_COMPLETE=true

# Sets public account id of the master account for this platform.
# Ensure that you own secret seed for this account.
#
# Type: String
# Possible values: TokenD account id
MASTER_ACCOUNT_ID="GBA4EX43M25UPV4WIE6RRMQOFTWXZZRIPFAI5VPY6Z2ZVVXVWZ6NEOOB" # SAMJKTZVW5UOHCDK5INYJNORF2HRKYI72M5XSZCBYAHQHR34FFR4Z6G4

# Sets seed that will be used to authenticate node in network.
# You may set alias to the node seed, to use it later in configs.
#
# Type: String
# Possible values: TokenD secret seed [+ " alias"]
NODE_SEED="SCWZDAKCXTQIKJHLHUVIBUTOOPJ4E5HW5ILVL42MMQWJRY2A2ARBB7H3 self"

# Tells node to participate in consensus.
# If set to false node will just observe.
#
# Type: Boolean
# Default: false
NODE_IS_VALIDATOR=true

# Tells where to store temporary data.
#
# Type: String
# Possible values: filesystem path
TMP_DIR_PATH="/data/tmp"

# Tells where to store buckets.
#
# Type: String
# Possible values: filesystem path
BUCKET_DIR_PATH="/data/buckets"

# Sets exchange name
#
# Type: String
BASE_EXCHANGE_NAME="TokenD"

# During this period transaction can be valid.
#
# Type: Integer
TX_EXPIRATION_PERIOD=604800

# TokenD node will try to include no more than this amount of transactions in
# each ledger.
#
# Type: Integer
DESIRED_MAX_TX_PER_LEDGER=500

# Gives node access to the database.
#
# Type: String
# Possible value: Postgres connection string
DATABASE="postgresql://dbname=core user=core password=core host=localhost port=5432"

# Passes command line flags to node.
#
# Type: String
# Possible values: see `core --help` to find more about available flags
COMMANDS=["ll?level=info"]

# If set to true, will connect and accept connections only from preferred
# peers.
#
# Type: Boolean
# Default: false
PREFERRED_PEERS_ONLY=false

# Sets the amount of faulty validators you want to tolerate.
#
# You'll need at least 3 * FAILURE_SAFETY + 1 entities in the top level of
# QUORUM_SET to be able to tolerate FAILURE_SAFETY nodes. If you have less
# nodes, core won't start.
# 
# The value of -1 tells to set FAILURE_SAFETY to (n-1)/3, where n is the
# amount of entities in the top level of QUORUM_SET.
# 
# The value of 0 is allowed only if UNSAFE_QUORUM is set to true.
# 
# Example:
# ```
# # Good                | # Bad: Not enough entities in validators list
# # 4 >= 3 * 1 + 1      | # 6 < 3 * 2 + 1
# FAILURE_SAFETY=1      | FAILURE_SAFETY=2
# [QUORUM_SET]          | [QUORUM_SET]
# THRESHOLD_PERCENT=66  | THRESHOLD_PERCENT=66
# VALIDATORS=[          | VALIDATORS=[
#     "alice",          |     "alice",
#     "bob",            |     "bob",
#     "carol",          |     "carol",
#     "dave"            |     "dave",
# ]                     |     "eve",
#                       |     "franklin"
#                       | ]
# ```  
# 
FAILURE_SAFETY=0

# Will skip errors due to potentially unsafe quorum_set (for example too low
# THRESHOLD_PERCENT or FAILURE_SAFETY above the value which may be handled by
# the quorum).
#
# Generally you should not set it to true.
# You may set it to true only if you are running your own network and you are
# not concerned with byzantine failures or if you fully understand how the
# quorum sets of other node relate to your node.
#
# Type: Boolean
# Default: false
UNSAFE_QUORUM=true

# Quorum set is a separate section.
# Each Quorum set section contains 2 configs: THRESHOLD_PERCENT and VALIDATORS.
# The latter lists everybody whose voice counts. The former sets the amount of
# voices needed to close ledger. Set quorum set wisely not to have splits
# and/or conflicts. To introduce groups and subgroups, name section in the
# following way: `[QUORUM_SET.group_name.subgroup_name]`.
# 
# Example:
# ```
# [QUORUM_SET]
# THRESHOLD_PERCENT=67
# VALIDATORS=[
#   "$alice",
#   "$bob",
#   "$carol"
# ]
# 
# [QUORUM_SET.1]
# THRESHOLD_PERCENT=50
# VALIDATORS=[
#   "$dave",
#   "$eve"
# ]
# 
# [QUORUM_SET.1.1]
# THRESHOLD_PERCENT=100
# VALIDATORS=[
#   "$franklin",
#   "$grace",
#   "$henry"
# ]
# 
# [QUORUM_SET.1.2]
# THRESHOLD_PERCENT=66
# VALIDATORS=[
#   "$ivy",
#   "$jacob",
#   "$kelly"
# ]
# 
# [QUORUM_SET.2]
# THRESHOLD_PERCENT=66
# VALIDATORS=[
#   "$liam",
#   "$mia",
#   "$nataly"
# ]
# ```
[QUORUM_SET]

# Percent of entities from quorum set, which must agree to close ledger.
THRESHOLD_PERCENT=51

# List of nodes, which voice counts
VALIDATORS=[
    "$self",
]

# History is a separate section. It tells node where to find history and
# where to write it. This can be files and directories in filesystem, or
# aws s3, or other storage.
[HISTORY.vs]
get="cp /data/history/{0} {1}"
put="cp {0} /data/history/{1}"
mkdir="mkdir -p /data/history/{0}"

